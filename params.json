{"name":"Chef","tagline":"The Chef symbolic execution platform, based off S2E","body":"S²E: A Platform for In-Vivo Multi-Path Software Analysis\r\n========================================================\r\nhttps://s2e.epfl.ch\r\n\r\n\r\nS2E is a platform for writing tools that analyze the properties and behavior of software systems. So far, S2E has been used to develop a comprehensive performance profiler, a reverse engineering tool for proprietary software, and a bug finding tool for both kernel-mode and user-mode binaries. Building these tools on top of S2E took less than 770 LOC and 40 person-hours each.\r\n\r\nS2E’s novelty consists of its ability to scale to large real systems, such as a full Windows stack. S2E is based on two new ideas:\r\n\r\n    1. Selective symbolic execution, a way to automatically\r\n       minimize the amount of code that has to be executed\r\n       symbolically given a target analysis; and\r\n\r\n    2. Relaxed execution consistency models, a way to make\r\n       principled performance/accuracy trade-offs in complex\r\n       analyses.\r\n\r\nThese techniques give S2E three key abilities:\r\n\r\n    1. to simultaneously analyze entire families of execution\r\n       paths, instead of just one execution at a time;\r\n    \r\n    2. to perform the analyses in-vivo within a real software\r\n       stack—user programs, libraries, kernel, drivers, etc.—\r\n       instead of using abstract models of these layers; and\r\n       to operate directly on binaries, thus being able to analyze\r\n       even proprietary software.\r\n\r\nConceptually, S2E is an automated path explorer with modular path analyzers: the explorer drives the target system down all execution paths of interest, while analyzers check properties of each such path (e.g., to look for bugs) or simply collect information (e.g., count page faults). Desired paths can be specified in multiple ways, and S2E users can either combine existing\r\nanalyzers to build a custom analysis tool, or write new analyzers using the S2E API.\r\n\r\nS2E helps make analyses based on symbolic execution practical for large software that runs in real environments, without requiring explicit modeling of these environments.\r\n\r\nS2E is built upon the KLEE symbolic execution engine (http://klee.llvm.org) and the QEMU virtual machine emulator (http://qemu.org).\r\n\r\nDocumentation\r\n=============\r\n\r\nSetup instruction and user documentation can be found in the /docs folder, both in RST and HTML format.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}